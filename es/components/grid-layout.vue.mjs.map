{"version":3,"file":"grid-layout.vue.mjs","sources":["../../src/components/grid-layout.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport {\r\n  ref,\r\n  reactive,\r\n  toRefs,\r\n  watch,\r\n  provide,\r\n  onBeforeMount,\r\n  onMounted,\r\n  onBeforeUnmount,\r\n  nextTick\r\n} from 'vue'\r\nimport GridItem from './grid-item.vue'\r\nimport { useResize } from '@vexip-ui/hooks'\r\nimport { createEventEmitter, isNull, debounce } from '@vexip-ui/utils'\r\nimport {\r\n  LAYOUT_KEY,\r\n  EMITTER_KEY,\r\n  bottom,\r\n  compact,\r\n  getLayoutItem,\r\n  moveElement,\r\n  validateLayout,\r\n  cloneLayout,\r\n  getAllCollisions\r\n} from '../helpers/common'\r\nimport {\r\n  getBreakpointFromWidth,\r\n  getColsFromBreakpoint,\r\n  findOrGenerateResponsiveLayout\r\n} from '../helpers/responsive'\r\n\r\nimport type { PropType } from 'vue'\r\nimport type {\r\n  Layout,\r\n  Breakpoint,\r\n  Breakpoints,\r\n  ResponsiveLayout,\r\n  LayoutInstance\r\n} from '../helpers/types'\r\n\r\nconst props = defineProps({\r\n  autoSize: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  colNum: {\r\n    type: Number,\r\n    default: 12\r\n  },\r\n  rowHeight: {\r\n    type: Number,\r\n    default: 150\r\n  },\r\n  maxRows: {\r\n    type: Number,\r\n    default: Infinity\r\n  },\r\n  margin: {\r\n    type: Array as PropType<number[]>,\r\n    default: () => [10, 10]\r\n  },\r\n  isDraggable: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  isResizable: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  isMirrored: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  isBounded: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  useCssTransforms: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  verticalCompact: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  restoreOnDrag: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  layout: {\r\n    type: Array as PropType<Layout>,\r\n    required: true\r\n  },\r\n  responsive: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  responsiveLayouts: {\r\n    type: Object as PropType<Partial<ResponsiveLayout>>,\r\n    default: () => ({})\r\n  },\r\n  transformScale: {\r\n    type: Number,\r\n    default: 1\r\n  },\r\n  breakpoints: {\r\n    type: Object as PropType<Breakpoints>,\r\n    default: () => ({ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 })\r\n  },\r\n  cols: {\r\n    type: Object as PropType<Breakpoints>,\r\n    default: () => ({ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 })\r\n  },\r\n  preventCollision: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  useStyleCursor: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n})\r\n\r\nconst emit = defineEmits([\r\n  'layout-before-mount',\r\n  'layout-mounted',\r\n  'layout-updated',\r\n  'breakpoint-changed',\r\n  'update:layout',\r\n  'layout-ready'\r\n])\r\n\r\nconst state = reactive({\r\n  width: -1,\r\n  mergedStyle: {},\r\n  lastLayoutLength: 0,\r\n  isDragging: false,\r\n  placeholder: {\r\n    x: 0,\r\n    y: 0,\r\n    w: 0,\r\n    h: 0,\r\n    i: '' as number | string\r\n  },\r\n  layouts: {} as Record<Breakpoint, Layout>, // array to store all layouts from different breakpoints\r\n  lastBreakpoint: null as Breakpoint | null, // store last active breakpoint\r\n  originalLayout: null! as Layout // store original Layout\r\n})\r\n\r\nconst itemInstances = new Map<number | string, any>()\r\n\r\nconst currentLayout = ref(props.layout)\r\nconst wrapper = ref<HTMLElement>()\r\n\r\nconst { observeResize, unobserveResize } = useResize()\r\nconst emitter = createEventEmitter()\r\n\r\nemitter.on('resizeEvent', resizeEventHandler)\r\nemitter.on('dragEvent', dragEventHandler)\r\n\r\nonBeforeMount(() => {\r\n  emit('layout-before-mount', currentLayout.value)\r\n})\r\n\r\nonMounted(() => {\r\n  emit('layout-mounted', currentLayout.value)\r\n\r\n  nextTick(() => {\r\n    validateLayout(currentLayout.value)\r\n\r\n    state.originalLayout = currentLayout.value\r\n\r\n    nextTick(() => {\r\n      initResponsiveFeatures()\r\n      wrapper.value && observeResize(wrapper.value, debounce(onWindowResize, 16))\r\n      compact(currentLayout.value, props.verticalCompact)\r\n      emit('layout-updated', currentLayout.value)\r\n      updateHeight()\r\n      onWindowResize()\r\n    })\r\n  })\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  emitter.clearAll()\r\n  wrapper.value && unobserveResize(wrapper.value)\r\n})\r\n\r\nfunction resizeEventHandler(\r\n  eventType: string,\r\n  i: number | string,\r\n  x: number,\r\n  y: number,\r\n  h: number,\r\n  w: number\r\n) {\r\n  resizeEvent(eventType, i, x, y, h, w)\r\n}\r\n\r\nfunction dragEventHandler(\r\n  eventType: string,\r\n  i: number | string,\r\n  x: number,\r\n  y: number,\r\n  h: number,\r\n  w: number\r\n) {\r\n  dragEvent(eventType, i, x, y, h, w)\r\n}\r\n\r\nwatch(\r\n  () => state.width,\r\n  (newVal, oldVal) => {\r\n    nextTick(() => {\r\n      emitter.emit('updateWidth', newVal)\r\n      if (oldVal === -1) {\r\n        /*\r\n        If oldVal === -1 is when the width has never been\r\n        set before. That only occurs when mounting is\r\n        finished, and onWindowResize has been called and\r\n        this.width has been changed the first time after it\r\n        got set to null in the constructor. It is now time\r\n        to issue layout-ready events as the GridItems have\r\n        their sizes configured properly.\r\n\r\n        The reason for emitting the layout-ready events on\r\n        the next tick is to allow for the newly-emitted\r\n        updateWidth event (above) to have reached the\r\n        children GridItem-s and had their effect, so we're\r\n        sure that they have the final size before we emit\r\n        layout-ready (for this GridLayout) and\r\n        item-layout-ready (for the GridItem-s).\r\n\r\n        This way any client event handlers can reliably\r\n        investigate stable sizes of GridItem-s.\r\n      */\r\n        nextTick(() => {\r\n          emit('layout-ready', currentLayout.value)\r\n        })\r\n      }\r\n      updateHeight()\r\n    })\r\n  }\r\n)\r\nwatch(\r\n  () => [props.layout, props.layout.length],\r\n  () => {\r\n    currentLayout.value = props.layout\r\n    layoutUpdate()\r\n  }\r\n)\r\nwatch(\r\n  () => props.colNum,\r\n  val => {\r\n    emitter.emit('setColNum', val)\r\n  }\r\n)\r\nwatch(\r\n  () => props.rowHeight,\r\n  value => {\r\n    emitter.emit('setRowHeight', value)\r\n  }\r\n)\r\nwatch(\r\n  () => props.isDraggable,\r\n  value => {\r\n    emitter.emit('setDraggable', value)\r\n  }\r\n)\r\nwatch(\r\n  () => props.isResizable,\r\n  value => {\r\n    emitter.emit('setResizable', value)\r\n  }\r\n)\r\nwatch(\r\n  () => props.isBounded,\r\n  value => {\r\n    emitter.emit('setBounded', value)\r\n  }\r\n)\r\nwatch(\r\n  () => props.transformScale,\r\n  value => {\r\n    emitter.emit('setTransformScale', value)\r\n  }\r\n)\r\nwatch(\r\n  () => props.responsive,\r\n  value => {\r\n    if (!value) {\r\n      emit('update:layout', state.originalLayout)\r\n      emitter.emit('setColNum', props.colNum)\r\n    }\r\n    onWindowResize()\r\n  }\r\n)\r\nwatch(\r\n  () => props.maxRows,\r\n  value => {\r\n    emitter.emit('setMaxRows', value)\r\n  }\r\n)\r\nwatch([() => props.margin, () => props.margin[1]], updateHeight)\r\n\r\nprovide(\r\n  LAYOUT_KEY,\r\n  reactive({\r\n    ...toRefs(props),\r\n    ...toRefs(state),\r\n    increaseItem,\r\n    decreaseItem\r\n  }) as LayoutInstance\r\n)\r\nprovide(EMITTER_KEY, emitter)\r\n\r\ndefineExpose({ state, getItem, resizeEvent, dragEvent })\r\n\r\nfunction increaseItem(item: any) {\r\n  itemInstances.set(item.i, item)\r\n}\r\n\r\nfunction decreaseItem(item: any) {\r\n  itemInstances.delete(item.i)\r\n}\r\n\r\nfunction getItem(id: number | string) {\r\n  return itemInstances.get(id)\r\n}\r\n\r\nfunction layoutUpdate() {\r\n  if (!isNull(currentLayout.value) && !isNull(state.originalLayout)) {\r\n    if (currentLayout.value.length !== state.originalLayout.length) {\r\n      const diff = findDifference(currentLayout.value, state.originalLayout)\r\n\r\n      if (diff.length > 0) {\r\n        if (currentLayout.value.length > state.originalLayout.length) {\r\n          state.originalLayout = state.originalLayout.concat(diff)\r\n        } else {\r\n          const ids = new Set(diff.map(item => item.i))\r\n          state.originalLayout = state.originalLayout.filter(item => !ids.has(item.i))\r\n        }\r\n      }\r\n\r\n      state.lastLayoutLength = currentLayout.value.length\r\n      initResponsiveFeatures()\r\n    }\r\n\r\n    compact(currentLayout.value, props.verticalCompact)\r\n    emitter.emit('updateWidth', state.width)\r\n    updateHeight()\r\n\r\n    emit('layout-updated', currentLayout.value)\r\n  }\r\n}\r\n\r\nfunction updateHeight() {\r\n  state.mergedStyle = {\r\n    height: containerHeight()\r\n  }\r\n}\r\n\r\nfunction onWindowResize() {\r\n  if (wrapper.value) {\r\n    state.width = wrapper.value.offsetWidth\r\n  }\r\n\r\n  emitter.emit('resizeEvent')\r\n}\r\n\r\nfunction containerHeight() {\r\n  if (!props.autoSize) return\r\n\r\n  const marginY = parseFloat(props.margin[1] as any)\r\n  const containerHeight = bottom(currentLayout.value) * (props.rowHeight + marginY) + marginY + 'px'\r\n  return containerHeight\r\n}\r\n\r\nlet positionsBeforeDrag: Record<string, { x: number, y: number }> | undefined\r\n\r\nfunction dragEvent(\r\n  eventName: string,\r\n  id: number | string,\r\n  x: number,\r\n  y: number,\r\n  h: number,\r\n  w: number\r\n) {\r\n  let l = getLayoutItem(currentLayout.value, id)!\r\n\r\n  // GetLayoutItem sometimes returns null object\r\n  if (isNull(l)) {\r\n    l = { h: 0, w: 0, x: 0, y: 0, i: '' }\r\n  }\r\n\r\n  if (eventName === 'dragstart' && !props.verticalCompact) {\r\n    positionsBeforeDrag = currentLayout.value.reduce(\r\n      (result, { i, x, y }) => ({\r\n        ...result,\r\n        [i]: { x, y }\r\n      }),\r\n      {}\r\n    )\r\n  }\r\n\r\n  if (eventName === 'dragmove' || eventName === 'dragstart') {\r\n    state.placeholder.i = id\r\n    state.placeholder.x = l.x\r\n    state.placeholder.y = l.y\r\n    state.placeholder.w = w\r\n    state.placeholder.h = h\r\n\r\n    nextTick(() => {\r\n      state.isDragging = true\r\n    })\r\n\r\n    emitter.emit('updateWidth', state.width)\r\n  } else {\r\n    nextTick(() => {\r\n      state.isDragging = false\r\n    })\r\n  }\r\n\r\n  // Move the element to the dragged location.\r\n  currentLayout.value = moveElement(currentLayout.value, l, x, y, true, props.preventCollision)\r\n\r\n  if (props.restoreOnDrag) {\r\n    // Do not compact items more than in layout before drag\r\n    // Set moved item as static to avoid to compact it\r\n    l.static = true\r\n    compact(currentLayout.value, props.verticalCompact, positionsBeforeDrag)\r\n    l.static = false\r\n  } else {\r\n    compact(currentLayout.value, props.verticalCompact)\r\n  }\r\n\r\n  // needed because vue can't detect changes on array element properties\r\n  emitter.emit('compact')\r\n  updateHeight()\r\n  if (eventName === 'dragend') {\r\n    positionsBeforeDrag = undefined\r\n    emit('layout-updated', currentLayout.value)\r\n  }\r\n}\r\n\r\nfunction resizeEvent(\r\n  eventName: string,\r\n  id: number | string,\r\n  x: number,\r\n  y: number,\r\n  h: number,\r\n  w: number\r\n) {\r\n  let l = getLayoutItem(currentLayout.value, id)!\r\n  // GetLayoutItem sometimes return null object\r\n  if (isNull(l)) {\r\n    l = { h: 0, w: 0, x: 0, y: 0, i: '' }\r\n  }\r\n\r\n  let hasCollisions\r\n  if (props.preventCollision) {\r\n    const collisions = getAllCollisions(currentLayout.value, { ...l, w, h }).filter(\r\n      layoutItem => layoutItem.i !== l.i\r\n    )\r\n    hasCollisions = collisions.length > 0\r\n\r\n    // If we're colliding, we need adjust the placeholder.\r\n    if (hasCollisions) {\r\n      // adjust w && h to maximum allowed space\r\n      let leastX = Infinity\r\n      let leastY = Infinity\r\n      collisions.forEach(layoutItem => {\r\n        if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x)\r\n        if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y)\r\n      })\r\n\r\n      if (Number.isFinite(leastX)) l.w = leastX - l.x\r\n      if (Number.isFinite(leastY)) l.h = leastY - l.y\r\n    }\r\n  }\r\n\r\n  if (!hasCollisions) {\r\n    // Set new width and height.\r\n    l.w = w\r\n    l.h = h\r\n  }\r\n\r\n  if (eventName === 'resizestart' || eventName === 'resizemove') {\r\n    state.placeholder.i = id\r\n    state.placeholder.x = x\r\n    state.placeholder.y = y\r\n    state.placeholder.w = l.w\r\n    state.placeholder.h = l.h\r\n    nextTick(() => {\r\n      state.isDragging = true\r\n    })\r\n    // this.$broadcast(\"updateWidth\", this.width);\r\n    emitter.emit('updateWidth', state.width)\r\n  } else {\r\n    nextTick(() => {\r\n      state.isDragging = false\r\n    })\r\n  }\r\n\r\n  if (props.responsive) responsiveGridLayout()\r\n\r\n  compact(currentLayout.value, props.verticalCompact)\r\n  emitter.emit('compact')\r\n  updateHeight()\r\n\r\n  if (eventName === 'resizeend') emit('layout-updated', currentLayout.value)\r\n}\r\n\r\nfunction responsiveGridLayout() {\r\n  const newBreakpoint = getBreakpointFromWidth(props.breakpoints, state.width)\r\n  const newCols = getColsFromBreakpoint(newBreakpoint, props.cols)\r\n\r\n  // save actual layout in layouts\r\n  if (!isNull(state.lastBreakpoint) && !state.layouts[state.lastBreakpoint]) {\r\n    state.layouts[state.lastBreakpoint] = cloneLayout(currentLayout.value)\r\n  }\r\n\r\n  // Find or generate a new layout.\r\n  const layout = findOrGenerateResponsiveLayout(\r\n    state.originalLayout,\r\n    state.layouts,\r\n    props.breakpoints,\r\n    newBreakpoint,\r\n    state.lastBreakpoint!,\r\n    newCols,\r\n    props.verticalCompact\r\n  )\r\n\r\n  // Store the new layout.\r\n  state.layouts[newBreakpoint] = layout\r\n\r\n  if (state.lastBreakpoint !== newBreakpoint) {\r\n    emit('breakpoint-changed', newBreakpoint, layout)\r\n  }\r\n\r\n  // new prop sync\r\n  emit('update:layout', layout)\r\n\r\n  state.lastBreakpoint = newBreakpoint\r\n  emitter.emit('setColNum', getColsFromBreakpoint(newBreakpoint, props.cols))\r\n}\r\n\r\nfunction initResponsiveFeatures() {\r\n  // clear layouts\r\n  state.layouts = Object.assign({} as Record<Breakpoint, Layout>, props.responsiveLayouts)\r\n}\r\n\r\nfunction findDifference(layout: Layout, originalLayout: Layout) {\r\n  const originalIds = new Set(originalLayout.map(item => item.i))\r\n  const ids = new Set(layout.map(item => item.i))\r\n\r\n  // Find values that are in result1 but not in result2\r\n  const uniqueResultOne = layout.filter(item => !originalIds.has(item.i))\r\n\r\n  // Find values that are in result2 but not in result1\r\n  const uniqueResultTwo = originalLayout.filter(item => !ids.has(item.i))\r\n\r\n  // Combine the two arrays of unique entries#\r\n  return uniqueResultOne.concat(uniqueResultTwo)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"wrapper\" class=\"vgl-layout\" :style=\"state.mergedStyle\">\r\n    <slot v-if=\"$slots.default\"></slot>\r\n    <template v-else>\r\n      <GridItem v-for=\"item in currentLayout\" :key=\"item.i\" v-bind=\"item\">\r\n        <slot name=\"item\" :item=\"item\"></slot>\r\n      </GridItem>\r\n    </template>\r\n    <GridItem\r\n      v-show=\"state.isDragging\"\r\n      class=\"vgl-item--placeholder\"\r\n      :x=\"state.placeholder.x\"\r\n      :y=\"state.placeholder.y\"\r\n      :w=\"state.placeholder.w\"\r\n      :h=\"state.placeholder.h\"\r\n      :i=\"state.placeholder.i\"\r\n    ></GridItem>\r\n  </div>\r\n</template>\r\n"],"names":["state","reactive","itemInstances","currentLayout","ref","props","wrapper","observeResize","unobserveResize","useResize","emitter","createEventEmitter","resizeEventHandler","dragEventHandler","onBeforeMount","emit","onMounted","nextTick","validateLayout","initResponsiveFeatures","debounce","onWindowResize","compact","updateHeight","onBeforeUnmount","eventType","i","x","y","h","w","resizeEvent","dragEvent","watch","newVal","oldVal","layoutUpdate","val","value","provide","LAYOUT_KEY","toRefs","increaseItem","decreaseItem","EMITTER_KEY","expose","getItem","item","id","isNull","diff","findDifference","ids","containerHeight","marginY","bottom","positionsBeforeDrag","eventName","l","getLayoutItem","result","moveElement","hasCollisions","collisions","getAllCollisions","layoutItem","leastX","leastY","responsiveGridLayout","newBreakpoint","getBreakpointFromWidth","newCols","getColsFromBreakpoint","cloneLayout","layout","findOrGenerateResponsiveLayout","originalLayout","originalIds","uniqueResultOne","uniqueResultTwo"],"mappings":"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"}